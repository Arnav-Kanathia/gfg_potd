class Solution {
  public:
    void dfs(int row, int col, vector<vector<int>>& grid, vector<vector<int>>& vis){
        vis[row][col] = 1;
        int n = grid.size();
        int m = grid[0].size();
        vector<pair<int, int>> directions = {{0,1}, {1,0}, {0,-1}, {-1,0}};
        
        for(auto dir:directions){
            int newRow = dir.first + row;
            int newCol = dir.second + col;
            
            if((newRow>=0 && newRow<n) && (newCol>=0 && newCol<m) && grid[newRow][newCol] == 1 && !vis[newRow][newCol]){
                dfs(newRow, newCol, grid, vis);
            }
        }
    }
    
    int numberOfEnclaves(vector<vector<int>> &grid) {
        int n = grid.size();
        int m = grid[0].size();
        
        vector<vector<int>> vis(n, vector<int>(m, 0));
        
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(i == 0 || j == 0 || i == n-1 || j == m-1){
                    if(grid[i][j] == 1 && !vis[i][j]){
                        dfs(i, j, grid, vis);
                    }
                }
            }
        }
        
        int count = 0;
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(grid[i][j] == 1 && !vis[i][j]) count++;
            }
        }
        
        return count;
    }
};
