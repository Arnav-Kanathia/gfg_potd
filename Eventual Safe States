class Solution {
  public:
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        vector<vector<int>> graph(V);
        vector<int> ans;
        
        for(int i = 0; i<V; i++){
            for(auto it:adj[i]) graph[it].push_back(i);
        }
        
        vector<int> indegree(V, 0);
        for(auto it: graph){
            for(auto ele:it){
                indegree[ele]++;
            }
        }
        
        queue<int> q;
        for(int i = 0; i<V; i++){
            if(indegree[i] == 0) q.push(i);
        }
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            ans.push_back(node);
            
            for(auto it:graph[node]){
                indegree[it]--;
                if(indegree[it] == 0) q.push(it);
            }
        }
        
        sort(ans.begin(), ans.end());
        return ans;
    }
};
